import React, { useEffect, useState } from 'react';
import { db, auth } from '../firebase/config';
import { collection, doc, getDoc } from "firebase/firestore";

const ScrollDataTable = () => {
  const [scrollData, setScrollData] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;
  const [totalPages, setTotalPages] = useState(1);
  const [pageDataAvailable, setPageDataAvailable] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const user = auth.currentUser;
      if (!user) return;

      const userId = user.uid;

      try {
        const userRef = doc(db, 'users', userId);
        const scrollDataRef = doc(collection(userRef, 'scrollData'), 'data');
        const scrollDataSnapshot = await getDoc(scrollDataRef);
        const data = scrollDataSnapshot.data();

        if (data) {
          const dataArray = Object.entries(data).map(([key, value]) => ({
            verse: key,
            scrollDepth: value.scrollDepth,
            timeSpent: value.timeSpent,
            timestamp: new Date(value.timestamp.toDate()).toLocaleString(),
          })).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

          // Set total pages
          setTotalPages(Math.ceil(dataArray.length / itemsPerPage));

          // Set page data availability
          const dataAvailability = Array.from({ length: totalPages }, (_, index) => {
            const startIndex = index * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            return dataArray.slice(startIndex, endIndex).length > 0;
          });
          setPageDataAvailable(dataAvailability);

          // Set current page data
          const startIndex = (currentPage - 1) * itemsPerPage;
          const endIndex = startIndex + itemsPerPage;
          const latestData = dataArray.slice(startIndex, endIndex);
          setScrollData(latestData);
        }
      } catch (error) {
        console.error('Error fetching scroll data:', error);
      }
    };

    fetchData();
  }, [currentPage, totalPages]);

  // Estimated times for each verse (in minutes)
  const verseEstimatedTimes = {
    
      "1.1": 4, "1.2": 2, "1.3": 2, "1.4": 1, "1.5": 1, "1.6": 1, "1.7": 1, "1.8": 2, "1.9": 2, "1.10": 3, "1.11": 2, "1.12": 1, "1.13": 2, "1.14": 2, "1.15": 4, "1.16-18": 5, "1.19": 2, "1.20": 3, "1.21-22": 4, "1.23": 2, "1.24": 2, "1.25": 2, "1.26": 2, "1.27": 1, "1.28": 4, "1.29": 2, "1.30": 3, "1.31": 3, "1.32-35": 4, "1.36": 4, "1.37-38": 1, "1.39": 3, "1.40": 4, "1.41": 3, "1.42": 2,
      "2.1": 2, "2.2": 8, "2.3": 3, "2.4": 1, "2.5":1 , "2.6": 3, "2.7": 3, "2.8": 5, "2.9": 2, "2.10": 2, "2.11": 2, "2.12": 5, "2.13": 5, "2.14": 3, "2.15": 2, "2.16": 4, "2.17": 7, "2.18": 3, "2.19": 2, "2.20": 5, "2.21": 3, "2.22": 5, "2.23": 4, "2.24": 3, "2.25": 4, "2.26": 4, "2.27": 3, "2.28": 3, "2.29": 4, "2.30": 4, "2.31": 3, "2.32": 4, "2.33": 3, "2.34": 2, "2.35": 2, "2.36": 1, "2.37": 4, "2.38": 4, "2.39": 8, "2.40": 0, "2.41": 4, "2.42-43": 4, "2.44": 1, "2.45": 4, "2.46": 6, "2.47": 4, "2.48": 3, "2.49": 3, "2.50": 2, "2.51": 2, "2.52": 3, "2.53": 2, "2.54": 2, "2.55": 2, "2.56": 4, "2.57": 2, "2.58": 3, "2.59": 2, "2.60": 3, "2.61": 4, "2.62": 3, "2.63": 3, "2.64": 3, "2.65": 1, "2.66": 3, "2.67": 1, "2.68": 1, "2.69": 2, "2.70": 3, "2.71": 3, "2.72": 3,
      "3.1":3,"3.2":3,"3.3":3,"3.4":3,"3.5":4,"3.6":3,"3.7":4,"3.8":4,"3.9":4,"3.10":4,"3.11":4,"3.12":4,"3.13":3,"3.14":4,"3.15":4,"3.16":4,"3.17":3,"3.18":1,"3.19":3,"3.20":3,"3.21":3,"3.22":1,"3.23":1,"3.24":3,"3.25":3,"3.26":1,"3.27":3,"3.28":3,"3.29":4,"3.30":3,"3.31":3,"3.32":1,"3.33":3,"3.34":4,"3.35":4,"3.36":4,"3.37":4,"3.38":3,"3.39":3,"3.40":4,"3.41":4,"3.42":4,"3.43":3,
      "4.1":5,"4.2":3,"4.3":1,"4.4":3,"4.5":5,"4.6":7,"4.7":6,"4.8":6,"4.9":9,"4.10":6,"4.11":6,"4.12":3,"4.13":3,"4.14":3,"4.15":3,"4.16":3,"4.17":3,"4.18":3,"4.19":1,"4.20":1,"4.21":3,"4.22":1,"4.23":1,"4.24":3,"4.25":3,"4.26":3,"4.27":3,"4.28":3,"4.29":3,"4.30":3,"4.31":3,"4.32":1,"4.33":3,"4.34":3,"4.35":6,"4.36":3,"4.37":3,"4.38":3,"4.39":1,"4.40":3,"4.41":3,"4.42":6,
      "5.1":3,"5.2":5,"5.3":3,"5.4":3,"5.5":3,"5.6":3,"5.7":3,"5.8":3,"5.9":3,"5.10":3,"5.11":3,"5.12":3,"5.13":3,"5.14":3,"5.15":5,"5.16":5,"5.17":3,"5.18":3,"5.19":3,"5.20":3,"5.21":3,"5.22":3,"5.23":3,"5.24":1,"5.25":3,"5.26":3,"5.27-28":3,"5.29":5,
      "6.1":5,"6.2":3,"6.3":3,"6.4":3,"6.5":5,"6.6":3,"6.7":3,"6.8":3,"6.9":1,"6.10":5,"6.11":3,"6.12":3,"6.13-14":7,"6.15":5,"6.16":5,"6.17":5,"6.18":7,"6.19":1,"6.20-23":7,"6.24":3,"6.25":1,"6.26":1,"6.27":1,"6.28":1,"6.29":5,"6.30":5,"6.31":5,"6.32":3,"6.33":3,"6.34":3,"6.35":3,"6.36":3,"6.37":3,"6.38":3,"6.39":1,"6.40":7,"6.41":3,"6.42":1,"6.43":3,"6.44":5,"6.45":31,"6.46":3,"6.47":5,
      "7.1":3,"7.2":1,"7.3":3,"7.4":5,"7.5":5,"7.6":3,"7.7":3,"7.8":3,"7.9":3,"7.10":3,"7.11":1,"7.12":3,"7.13":3,"7.14":5,"7.15":5,"7.16":5,"7.17":3,"7.18":3,"7.19":3,"7.20":3,"7.21":3,"7.22":5,"7.23":3,"7.24":3,"7.25":5,"7.26":5,"7.27":3,"7.28":3,"7.29":3,"7.30":5,
      "8.1":1,"8.2":3,"8.3":5,"8.4":3,"8.5":3,"8.6":3,"8.7":7,"8.8":3,"8.9":3,"8.10":3,"8.11":3,"8.12":12,"8.13":1,"8.14":3,"8.15":1,"8.16":3,"8.17":3,"8.18":3,"8.19":1,"8.20":1,"8.21":3,"8.22":3,"8.23":3,"8.24":3,"8.25":1,"8.26":1,"8.27":3,"8.28":5,
      "9.1":5,"9.2":7,"9.3":5,"9.4":3,"9.5":3,"9.6":3,"9.7":1,"9.8":3,"9.9":3,"9.10":3,"9.11":5,"9.12":5,"9.13":3,"9.14":5,"9.15":3,"9.16":1,"9.17":3,"9.18":3,"9.19":3,"9.20":3,"9.21":3,"9.22":3,"9.23":3,"9.24":3,"9.25":3,"9.26":5,"9.27":3,"9.28":5,"9.29":5,"9.30":5,"9.31":3,"9.32":3,"9.33":3,"9.34":5,
      "10.1":3,"10.2":5,"10.3":3,"10.4-5":7,"10.6":3,"10.7":3,"10.8":3,"10.9":5,"10.10":3,"10.11":5,"10.12-13":5,"10.14":1,"10.15":3,"10.16":1,"10.17":3,"10.18":3,"10.19":3,"10.20":3,"10.21":1,"10.22":1,"10.23":1,"10.24":1,"10.25":3,"10.26":1,"10.27":3,"10.28":1,"10.29":3,"10.30":1,"10.31":1,"10.32":3,"10.33":3,"10.34":3,"10.35":3,"10.36":3,"10.37":3,"10.38":1,"10.39":1,"10.40":1,"10.41":1,"10.42":3,
      "11.1":3,"11.2":1,"11.3":3,"11.4":3,"11.5":1,"11.6":1,"11.7":1,"11.8":3,"11.9":1,"11.10":1,"11.11":1,"11.12":1,"11.13":1,"11.14":3,"11.15":1,"11.16":1,"11.17":1,"11.18":1,"11.19":1,"11.20":1,"11.21":1,"11.22":1,"11.23":1,"11.24":1,"11.25":1,"11.26":1,"11.27":1,"11.28":1,"11.29":1,"11.30":1,"11.31":1,"11.32":3,"11.33":3,"11.34":1,"11.35":1,"11.36":3,"11.37":3,"11.38":1,"11.39":1,"11.40":1,"11.41-42":3,"11.43":1,"11.44":1,"11.45":3,"11.46":3,"11.47":3,"11.48":1,"11.49":3,"11.50":3,"11.51":1,"11.52":5,"11.53":3,"11.54":5,"11.55":7,
      "12.1":5,"12.2":1,"12.3-4":3,"12.5":3,"12.6-7":7,"12.8":1,"12.9":3,"12.10":3,"12.11":3,"12.12":3,"12.13-14":3,"12.15":3,"12.16":3,"12.17":1,"12.18-19":3,"12.20":3,
      "13.1-2":5,"13.3":3,"13.4":3,"13.5":3,"13.6-7":3,"13.8-12":18,"13.13":3,"13.14":3,"13.15":3,"13.16":3,"13.17":3,"13.18":3,"13.19":3,"13.20":3,"13.21":3,"13.22":3,"13.23":5,"13.24":1,"13.25":3,"13.26":3,"13.27":1,"13.28":1,"13.29":1,"13.30":1,"13.31":1,"13.32":1,"13.33":1,"13.34":3,"13.35":3,
      "14.1":3,"14.2":3,"14.3":3,"14.4":1,"14.5":1,"14.6":3,"14.7":3,"14.8":3,"14.9":1,"14.10":1,"14.11":1,"14.12":1,"14.13":1,"14.14":1,"14.15":1,"14.16":5,"14.17":3,"14.18":3,"14.19":3,"14.20":3,"14.21":3,"14.22-25":3,"14.26":3,"14.27":5,
      "15.1":5,"15.2":3,"15.3-4":3,"15.5":3,"15.6":5,"15.7":5,"15.8":3,"15.9":3,"15.10":3,"15.11":3,"15.12":3,"15.13":3,"15.14":3,"15.15":5,"15.16":3,"15.17":3,"15.18":1,"15.19":3,"15.20":3,
      "16.1-3":15,"16.4":3,"16.5":1,"16.6":1,"16.7":3,"16.8":3,"16.9":3,"16.10":3,"16.11-12":3,"16.13-15":1,"16.16":5,"16.17":3,"16.18":3,"16.19":3,"16.20":3,"16.21":1,"16.22":3,"16.23":3,"16.24":5,
      "17.1":3,"17.2":3,"17.3":3,"17.4":3,"17.5-6":3,"17.7":3,"17.8-10":3,"17.11":3,"17.12":1,"17.13":1,"17.14":1,"17.15":3,"17.16":3,"17.17":1,"17.18":1,"17.19":1,"17.20":1,"17.21":1,"17.22":1,"17.23":3,"17.24":1,"17.25":1,"17.26":3,"17.27":3,"17.28":3,
      "18.1":3,"18.2":3,"18.3":3,"18.4":3,"18.5":3,"18.6":3,"18.7":3,"18.8":3,"18.9":3,"18.10":3,"18.11":3,"18.12":1,"18.13":1,"18.14":1,"18.15":3,"18.16":3,"18.17":3,"18.18":3,"18.19":3,"18.20":3,"18.21":3,"18.22":3,"18.23":3,"18.24":1,"18.25":3,"18.26":3,"18.27":3,"18.28":3,"18.29":3,"18.30":3,"18.31":3,"18.32":3,"18.33":3,"18.34":3,"18.35":3,"18.36-37":2,"18.38":3,"18.39":3,"18.40":3,"18.41":1,"18.42":1,"18.43":1,"18.44":1,"18.45":1,"18.46":1,"18.47":3,"18.48":3,"18.49":3,"18.50":3,"18.51-53":2,"18.54":1,"18.55":3,"18.56":3,"18.57":3,"18.58":3,"18.59":3,"18.60":3,"18.61":3,"18.62":3,"18.63":3,"18.64":3,"18.65":3,"18.66":3,"18.67":5,"18.68":3,"18.69":3,"18.70":3,"18.71":1,"18.72":3,"18.73":5,"18.74":3,"18.75":3,"18.76":3,"18.77":3,"18.78":6

    };

  const handlePageClick = (pageNumber) => {
    if (pageDataAvailable[pageNumber - 1]) {
      setCurrentPage(pageNumber);
    }
  };

  return (
    <div className="overflow-x-auto">
      <h2 className="mb-4 text-lg font-bold">Scroll Data</h2>
      <table className="w-full border-collapse">
        <thead>
          <tr>
            <th className="px-4 py-2 text-left bg-gray-200">Verse</th>
            <th className="px-4 py-2 text-left bg-gray-200">Scroll Depth (%)</th>
            <th className="px-4 py-2 text-left bg-gray-200">Time Spent (minutes)</th>
            <th className="px-4 py-2 text-left bg-gray-200">Timestamp</th>
            <th className="px-4 py-2 text-left bg-gray-200">Status</th>
          </tr>
        </thead>
        <tbody>
          {scrollData.map((data) => (
            <tr key={data.verse}>
              <td className="px-4 py-2 border">{data.verse}</td>
              <td className="px-4 py-2 border">{data.scrollDepth}</td>
              <td className="px-4 py-2 border">{data.timeSpent}</td>
              <td className="px-4 py-2 border">{data.timestamp}</td>
             <td className="px-4 py-2 border">
                {data.scrollDepth > 80 && data.timeSpent >= verseEstimatedTimes[data.verse] ? (
                  <span className="inline-block h-4 w-4 rounded-full bg-green-500"></span>

                ) : (
                  <span className="inline-block w-4 h-4 bg-yellow-500 rounded-full"></span>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <div className="flex justify-end mt-4">
        {Array.from({ length: 5 }, (_, index) => (
          <button
            key={index + 1}
            onClick={() => handlePageClick(index + 1)}
            disabled={!pageDataAvailable[index]}
            className={`mx-1 px-3 py-1 rounded ${
              currentPage === index + 1 ? 'bg-gray-400 text-white'
                : pageDataAvailable[index]
                  ? 'bg-gray-200 text-gray-600 hover:bg-gray-300 hover:text-gray-700'
                  : 'bg-red-200 text-red-600 cursor-not-allowed'}`}
          >
            {index + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default ScrollDataTable;
